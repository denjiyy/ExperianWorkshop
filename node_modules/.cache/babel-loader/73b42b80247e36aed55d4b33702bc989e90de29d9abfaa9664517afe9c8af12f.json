{"ast":null,"code":"import axios from \"axios\";\nconst baseURL = \"https://localhost:7223/api/\";\naxios.defaults.headers.post['Content-Type'] = 'application/json';\nexport default {\n  dUser({\n    url = baseURL + 'auth/',\n    idUser = ''\n  }) {\n    return {\n      fetchAll: async () => {\n        return await axios.get(url);\n      },\n      fetchById: async (id = '') => {\n        return await axios.get(`${url}${id}`);\n      },\n      create: async newRecord => {\n        return axios.post(url, newRecord, {\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json' // Indicates that the request body is JSON\n          }\n        });\n      },\n      //  create:  (newRecord: SignUpProps) => {\n      //   return  fetch(url, {\n      //     method: 'POST', // Setting method to POST\n      //     headers: {\n      //       'Accept': 'application/json',\n      //       'Content-Type': 'application/json' // Indicates that the request body is JSON\n      //     },\n      //     body: JSON.stringify(newRecord) // Stringify the newRecord object to send it as JSON\n      //   });\n      // },\n      update: async (id = idUser !== null && idUser !== void 0 ? idUser : '', updateRecord) => {\n        return await axios.put(`${url}${id}`, updateRecord);\n      },\n      delete: async (id = idUser !== null && idUser !== void 0 ? idUser : '') => {\n        return await axios.delete(`${url}${id}`);\n      }\n    };\n  }\n};","map":{"version":3,"names":["axios","baseURL","defaults","headers","post","dUser","url","idUser","fetchAll","get","fetchById","id","create","newRecord","update","updateRecord","put","delete"],"sources":["D:/experianProject/experian/ExperianWorkshop/src/actions/apiCRUDSlice.ts"],"sourcesContent":[" import axios,{AxiosResponse} from \"axios\";\r\nimport { SignUpProps } from \"../types/form\";\r\nimport { DUser } from \"../reducers\";\r\nimport { create } from \"domain\";\r\nimport { json } from \"stream/consumers\";\r\n const baseURL = \"https://localhost:7223/api/\"\r\n interface UrlProps{\r\n    url?:string,\r\n    idUser?:string,\r\n\r\n }\r\naxios.defaults.headers.post['Content-Type'] = 'application/json'; \r\n\r\n export default{\r\n\r\n    dUser({ url = baseURL + 'auth/', idUser = '' }: UrlProps) {\r\n        return {\r\n          fetchAll: async (): Promise<AxiosResponse<any>> => {\r\n            return await axios.get(url);\r\n          },\r\n          fetchById: async (id: string = ''): Promise<AxiosResponse<any>> => {\r\n            return await axios.get(`${url}${id}`);\r\n          },\r\n          create: async (newRecord:SignUpProps): Promise<AxiosResponse<any>>=>{\r\n            \r\n            return(axios.post(url,newRecord,{\r\n              headers: {\r\n                      'Accept': 'application/json',\r\n                      'Content-Type': 'application/json' // Indicates that the request body is JSON\r\n                    },\r\n            }))\r\n          },\r\n          //  create:  (newRecord: SignUpProps) => {\r\n          //   return  fetch(url, {\r\n          //     method: 'POST', // Setting method to POST\r\n          //     headers: {\r\n          //       'Accept': 'application/json',\r\n          //       'Content-Type': 'application/json' // Indicates that the request body is JSON\r\n          //     },\r\n          //     body: JSON.stringify(newRecord) // Stringify the newRecord object to send it as JSON\r\n          //   });\r\n          // },\r\n          update: async (id: string = idUser ?? '', updateRecord: SignUpProps): Promise<AxiosResponse<any>> => {\r\n            return await axios.put(`${url}${id}`, updateRecord);\r\n          },\r\n          delete: async (id: string = idUser ?? ''): Promise<AxiosResponse<any>> => {\r\n            return await axios.delete(`${url}${id}`);\r\n          },\r\n        };\r\n      },\r\n\r\n }\r\n"],"mappings":"AAAC,OAAOA,KAAK,MAAsB,OAAO;AAKzC,MAAMC,OAAO,GAAG,6BAA6B;AAM9CD,KAAK,CAACE,QAAQ,CAACC,OAAO,CAACC,IAAI,CAAC,cAAc,CAAC,GAAG,kBAAkB;AAE/D,eAAc;EAEXC,KAAKA,CAAC;IAAEC,GAAG,GAAGL,OAAO,GAAG,OAAO;IAAEM,MAAM,GAAG;EAAa,CAAC,EAAE;IACtD,OAAO;MACLC,QAAQ,EAAE,MAAAA,CAAA,KAAyC;QACjD,OAAO,MAAMR,KAAK,CAACS,GAAG,CAACH,GAAG,CAAC;MAC7B,CAAC;MACDI,SAAS,EAAE,MAAAA,CAAOC,EAAU,GAAG,EAAE,KAAkC;QACjE,OAAO,MAAMX,KAAK,CAACS,GAAG,CAAC,GAAGH,GAAG,GAAGK,EAAE,EAAE,CAAC;MACvC,CAAC;MACDC,MAAM,EAAE,MAAOC,SAAqB,IAAgC;QAElE,OAAOb,KAAK,CAACI,IAAI,CAACE,GAAG,EAACO,SAAS,EAAC;UAC9BV,OAAO,EAAE;YACD,QAAQ,EAAE,kBAAkB;YAC5B,cAAc,EAAE,kBAAkB,CAAC;UACrC;QACR,CAAC,CAAC;MACJ,CAAC;MACD;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACAW,MAAM,EAAE,MAAAA,CAAOH,EAAU,GAAGJ,MAAM,aAANA,MAAM,cAANA,MAAM,GAAI,EAAE,EAAEQ,YAAyB,KAAkC;QACnG,OAAO,MAAMf,KAAK,CAACgB,GAAG,CAAC,GAAGV,GAAG,GAAGK,EAAE,EAAE,EAAEI,YAAY,CAAC;MACrD,CAAC;MACDE,MAAM,EAAE,MAAAA,CAAON,EAAU,GAAGJ,MAAM,aAANA,MAAM,cAANA,MAAM,GAAI,EAAE,KAAkC;QACxE,OAAO,MAAMP,KAAK,CAACiB,MAAM,CAAC,GAAGX,GAAG,GAAGK,EAAE,EAAE,CAAC;MAC1C;IACF,CAAC;EACH;AAEL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}