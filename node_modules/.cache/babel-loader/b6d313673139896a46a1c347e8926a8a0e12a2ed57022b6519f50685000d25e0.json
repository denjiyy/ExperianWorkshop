{"ast":null,"code":"import { apiSlice } from \"./apiSlice\";\nimport { createEntityAdapter } from \"@reduxjs/toolkit\";\nexport const authAdapter = createEntityAdapter({});\nconst initialState = authAdapter.getInitialState();\nexport const authApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    login: builder.mutation({\n      query: credentials => ({\n        url: '/api/auth',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        method: 'POST',\n        body: {\n          ...credentials\n        }\n      }),\n      onQueryStarted: async (arg, {\n        dispatch,\n        queryFulfilled\n      }) => {\n        try {\n          await queryFulfilled;\n          console.log('API request was successful');\n        } catch (err) {\n          console.error('API request failed', err);\n        }\n      }\n    })\n  })\n});\nexport const {\n  useLoginMutation\n} = authApiSlice;\n// export const selectAuthResult = authApiSlice.endpoints.login.select()\n// const selectAuthData = createSelector(selectAuthResult,selectTheData=>selectTheData.data)\n\n//Mutation is for POST,PUT,DELETE","map":{"version":3,"names":["apiSlice","createEntityAdapter","authAdapter","initialState","getInitialState","authApiSlice","injectEndpoints","endpoints","builder","login","mutation","query","credentials","url","headers","method","body","onQueryStarted","arg","dispatch","queryFulfilled","console","log","err","error","useLoginMutation"],"sources":["D:/experianProject/experian/ExperianWorkshop/src/actions/authApiSlice.ts"],"sourcesContent":["import { error } from \"console\";\r\nimport { apiSlice } from \"./apiSlice\";\r\nimport { createEntityAdapter, createSelector } from \"@reduxjs/toolkit\";\r\n\r\nexport const authAdapter = createEntityAdapter({})\r\nconst initialState = authAdapter.getInitialState()\r\n \r\nexport const authApiSlice = apiSlice.injectEndpoints({\r\n    endpoints:builder=>({\r\n        login:builder.mutation({\r\n            query:credentials=>({\r\n                url:'/api/auth',\r\n                headers:{\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json' \r\n                },\r\n                method:'POST',\r\n                body:{...credentials},\r\n            \r\n            }),\r\n            onQueryStarted: async (arg, { dispatch, queryFulfilled }) => {\r\n                try {\r\n                  await queryFulfilled;\r\n                  console.log('API request was successful');\r\n                } catch (err) {\r\n                  console.error('API request failed', err);\r\n                }\r\n            },\r\n\r\n        })\r\n    })\r\n})\r\nexport const {\r\n    useLoginMutation \r\n}= authApiSlice\r\n// export const selectAuthResult = authApiSlice.endpoints.login.select()\r\n// const selectAuthData = createSelector(selectAuthResult,selectTheData=>selectTheData.data)\r\n\r\n//Mutation is for POST,PUT,DELETE\r\n"],"mappings":"AACA,SAASA,QAAQ,QAAQ,YAAY;AACrC,SAASC,mBAAmB,QAAwB,kBAAkB;AAEtE,OAAO,MAAMC,WAAW,GAAGD,mBAAmB,CAAC,CAAC,CAAC,CAAC;AAClD,MAAME,YAAY,GAAGD,WAAW,CAACE,eAAe,CAAC,CAAC;AAElD,OAAO,MAAMC,YAAY,GAAGL,QAAQ,CAACM,eAAe,CAAC;EACjDC,SAAS,EAACC,OAAO,KAAG;IAChBC,KAAK,EAACD,OAAO,CAACE,QAAQ,CAAC;MACnBC,KAAK,EAACC,WAAW,KAAG;QAChBC,GAAG,EAAC,WAAW;QACfC,OAAO,EAAC;UACJ,QAAQ,EAAE,kBAAkB;UAC5B,cAAc,EAAE;QACpB,CAAC;QACDC,MAAM,EAAC,MAAM;QACbC,IAAI,EAAC;UAAC,GAAGJ;QAAW;MAExB,CAAC,CAAC;MACFK,cAAc,EAAE,MAAAA,CAAOC,GAAG,EAAE;QAAEC,QAAQ;QAAEC;MAAe,CAAC,KAAK;QACzD,IAAI;UACF,MAAMA,cAAc;UACpBC,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;QAC3C,CAAC,CAAC,OAAOC,GAAG,EAAE;UACZF,OAAO,CAACG,KAAK,CAAC,oBAAoB,EAAED,GAAG,CAAC;QAC1C;MACJ;IAEJ,CAAC;EACL,CAAC;AACL,CAAC,CAAC;AACF,OAAO,MAAM;EACTE;AACJ,CAAC,GAAEpB,YAAY;AACf;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}