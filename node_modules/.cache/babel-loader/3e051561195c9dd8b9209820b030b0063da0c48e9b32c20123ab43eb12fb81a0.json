{"ast":null,"code":"import { ACTION_TYPES } from \"../actions/Duser\";\nconst initialState = {\n  list: []\n};\nexport const DUser = (state = initialState, action) => {\n  switch (action.type) {\n    case ACTION_TYPES.FETCH_ALL:\n      return {\n        ...state,\n        list: [...action.payload]\n      };\n    case ACTION_TYPES.CREATE:\n      return {\n        ...state,\n        list: [...state.list, action.payload]\n      };\n    case ACTION_TYPES.UPDATE:\n      return {\n        ...state,\n        list: state.list.map(x => x.id == action.payload.id ? action.payload : x)\n      };\n    case ACTION_TYPES.DELETE:\n      return {\n        ...state,\n        list: state.list.filter(x => x.id != action.payload)\n      };\n    default:\n      return state;\n  }\n};\n//action type to be defined\n_c = DUser;\nvar _c;\n$RefreshReg$(_c, \"DUser\");","map":{"version":3,"names":["ACTION_TYPES","initialState","list","DUser","state","action","type","FETCH_ALL","payload","CREATE","UPDATE","map","x","id","DELETE","filter","_c","$RefreshReg$"],"sources":["D:/experianProject/experian/ExperianWorkshop/src/reducers/DUser.ts"],"sourcesContent":["import {ACTION_TYPES } from \"../actions/Duser\"\r\nimport { DUserAction, DUserState } from \"../types\";\r\n\r\nconst initialState:DUserState = {\r\n    list:[]\r\n}\r\nexport const DUser = (state:DUserState=initialState,action:DUserAction) =>{\r\n    switch(action.type){\r\n        case ACTION_TYPES.FETCH_ALL:\r\n            return{\r\n                ...state,\r\n                list:[...action.payload]\r\n            }\r\n            case ACTION_TYPES.CREATE:\r\n                return{\r\n                    ...state,\r\n                    list:[...state.list,action.payload]\r\n                }\r\n                case ACTION_TYPES.UPDATE:\r\n                    return{\r\n                        ...state,\r\n                        list:state.list.map(x=>x.id==action.payload.id?action.payload:x)\r\n                    }\r\n                    case ACTION_TYPES.DELETE:\r\n                        return{\r\n                            ...state,\r\n                            list:state.list.filter(x=>x.id!=action.payload)\r\n                        }\r\n            default:\r\n                return state;\r\n    }\r\n}\r\n//action type to be defined"],"mappings":"AAAA,SAAQA,YAAY,QAAQ,kBAAkB;AAG9C,MAAMC,YAAuB,GAAG;EAC5BC,IAAI,EAAC;AACT,CAAC;AACD,OAAO,MAAMC,KAAK,GAAGA,CAACC,KAAgB,GAACH,YAAY,EAACI,MAAkB,KAAI;EACtE,QAAOA,MAAM,CAACC,IAAI;IACd,KAAKN,YAAY,CAACO,SAAS;MACvB,OAAM;QACF,GAAGH,KAAK;QACRF,IAAI,EAAC,CAAC,GAAGG,MAAM,CAACG,OAAO;MAC3B,CAAC;IACD,KAAKR,YAAY,CAACS,MAAM;MACpB,OAAM;QACF,GAAGL,KAAK;QACRF,IAAI,EAAC,CAAC,GAAGE,KAAK,CAACF,IAAI,EAACG,MAAM,CAACG,OAAO;MACtC,CAAC;IACD,KAAKR,YAAY,CAACU,MAAM;MACpB,OAAM;QACF,GAAGN,KAAK;QACRF,IAAI,EAACE,KAAK,CAACF,IAAI,CAACS,GAAG,CAACC,CAAC,IAAEA,CAAC,CAACC,EAAE,IAAER,MAAM,CAACG,OAAO,CAACK,EAAE,GAACR,MAAM,CAACG,OAAO,GAACI,CAAC;MACnE,CAAC;IACD,KAAKZ,YAAY,CAACc,MAAM;MACpB,OAAM;QACF,GAAGV,KAAK;QACRF,IAAI,EAACE,KAAK,CAACF,IAAI,CAACa,MAAM,CAACH,CAAC,IAAEA,CAAC,CAACC,EAAE,IAAER,MAAM,CAACG,OAAO;MAClD,CAAC;IACb;MACI,OAAOJ,KAAK;EACxB;AACJ,CAAC;AACD;AAAAY,EAAA,GA1Bab,KAAK;AAAA,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}