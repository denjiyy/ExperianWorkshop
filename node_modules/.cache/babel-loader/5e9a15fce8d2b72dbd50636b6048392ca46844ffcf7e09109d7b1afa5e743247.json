{"ast":null,"code":"var _jsxFileName = \"D:\\\\experianProject\\\\experian\\\\ExperianWorkshop\\\\src\\\\components\\\\FormInput\\\\FormInput.tsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport * as S from \"./elements\";\nimport { useController } from \"react-hook-form\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const FormInput = ({\n  placeholder,\n  variant,\n  name,\n  control,\n  textarea,\n  rows,\n  path,\n  fill,\n  viewBox = \"0 0 20 20\",\n  // Default value for viewBox\n  stroke,\n  strokeOpacity,\n  ...props\n}) => {\n  _s();\n  const {\n    field: {\n      onChange,\n      onBlur,\n      value,\n      ref\n    },\n    fieldState: {\n      invalid,\n      isTouched,\n      isDirty,\n      error\n    }\n  } = useController({\n    name,\n    control,\n    rules: {\n      required: true\n    },\n    defaultValue: \"\"\n  });\n  const InputComponent = textarea ? \"textarea\" : \"input\";\n  return /*#__PURE__*/_jsxDEV(S.FormInputContainer, {\n    children: [/*#__PURE__*/_jsxDEV(S.Icon, {\n      path: path,\n      xmlns: \"http://www.w3.org/2000/svg\",\n      viewBox: \"0 0 20 20\",\n      fill: \"none\",\n      stroke: stroke,\n      strokeOpacity: strokeOpacity\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(S.FormInput, {\n      ...props,\n      as: InputComponent,\n      variant: \"alert\",\n      placeholder: placeholder,\n      onChange: onChange,\n      onBlur: onBlur,\n      value: value,\n      ref: ref,\n      rows: textarea ? rows : undefined\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n  // if (error) {\n  //   return (\n  //     <>\n  //       <S.FormInput\n  //         {...props}\n  //         as={InputComponent}\n  //         variant=\"alert\"\n  //         placeholder={placeholder}\n  //         onChange={onChange}\n  //         onBlur={onBlur}\n  //         value={value}\n  //         ref={ref}\n  //         rows={textarea ? rows : undefined} // Only include rows for textarea\n  //       />\n  //     </>\n  //   );\n  // }\n  // return (\n  //   <>\n  //     <S.FormInput\n  //       {...props}\n  //       as={InputComponent}\n  //       placeholder={placeholder}\n  //       onChange={onChange}\n  //       onBlur={onBlur}\n  //       value={value}\n  //       ref={ref}\n  //       rows={textarea ? rows : undefined} // Only include rows for textarea\n  //     />\n  //   </>\n  //);\n};\n_s(FormInput, \"pKFRRCKLQ1++7A2lo+Q2gEgVHoU=\", false, function () {\n  return [useController];\n});\n_c = FormInput;\nvar _c;\n$RefreshReg$(_c, \"FormInput\");","map":{"version":3,"names":["React","S","useController","jsxDEV","_jsxDEV","FormInput","placeholder","variant","name","control","textarea","rows","path","fill","viewBox","stroke","strokeOpacity","props","_s","field","onChange","onBlur","value","ref","fieldState","invalid","isTouched","isDirty","error","rules","required","defaultValue","InputComponent","FormInputContainer","children","Icon","xmlns","fileName","_jsxFileName","lineNumber","columnNumber","as","undefined","_c","$RefreshReg$"],"sources":["D:/experianProject/experian/ExperianWorkshop/src/components/FormInput/FormInput.tsx"],"sourcesContent":["import React from \"react\";\r\nimport * as S from \"./elements\";\r\nimport { Control, FieldValues, Path, useController } from \"react-hook-form\";\r\nimport { HTMLInputProps } from \"../../types\";\r\nimport { IconProps } from \"../Icon\";\r\n\r\nexport interface FormInputProps<T extends FieldValues = any>\r\n  extends Omit<HTMLInputProps, \"name\" | \"defaultValue\"> {\r\n  name: Path<T>;\r\n  label?: string;\r\n//   control: Control<T, any>;\r\ncontrol:any;\r\n  variant?: string;\r\n  textarea?: boolean;\r\n  rows?: number; // Add rows for textarea\r\n}\r\ntype CombinedFormInputProps<T extends FieldValues = any> = FormInputProps<T> & IconProps;\r\n\r\n\r\nexport const FormInput = <T extends FieldValues = any>({\r\n  placeholder,\r\n  variant,\r\n  name,\r\n  control,\r\n  textarea,\r\n  rows,\r\n  path,\r\n  fill,\r\n  viewBox = \"0 0 20 20\", // Default value for viewBox\r\n  stroke,\r\n  strokeOpacity,\r\n  ...props\r\n}: CombinedFormInputProps<T>) => {\r\n  const {\r\n    field: { onChange, onBlur, value, ref },\r\n    fieldState: { invalid, isTouched, isDirty, error },\r\n  } = useController({\r\n    name,\r\n    control,\r\n    rules: { required: true },\r\n    defaultValue: \"\" as any,\r\n  });\r\n\r\n  const InputComponent = textarea ? \"textarea\" : \"input\";\r\n\r\n  return(\r\n    <S.FormInputContainer>\r\n      <S.Icon  path={path} xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"none\" stroke={stroke} strokeOpacity={strokeOpacity}  />\r\n      <S.FormInput\r\n      {...props}\r\n              as={InputComponent}\r\n              variant=\"alert\"\r\n              placeholder={placeholder}\r\n              onChange={onChange}\r\n              onBlur={onBlur}\r\n              value={value}\r\n              ref={ref}\r\n              rows={textarea ? rows : undefined}\r\n      />\r\n\r\n    </S.FormInputContainer>\r\n  )\r\n  // if (error) {\r\n  //   return (\r\n  //     <>\r\n  //       <S.FormInput\r\n  //         {...props}\r\n  //         as={InputComponent}\r\n  //         variant=\"alert\"\r\n  //         placeholder={placeholder}\r\n  //         onChange={onChange}\r\n  //         onBlur={onBlur}\r\n  //         value={value}\r\n  //         ref={ref}\r\n  //         rows={textarea ? rows : undefined} // Only include rows for textarea\r\n  //       />\r\n  //     </>\r\n  //   );\r\n  // }\r\n  // return (\r\n  //   <>\r\n  //     <S.FormInput\r\n  //       {...props}\r\n  //       as={InputComponent}\r\n  //       placeholder={placeholder}\r\n  //       onChange={onChange}\r\n  //       onBlur={onBlur}\r\n  //       value={value}\r\n  //       ref={ref}\r\n  //       rows={textarea ? rows : undefined} // Only include rows for textarea\r\n  //     />\r\n  //   </>\r\n  //);\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,KAAKC,CAAC,MAAM,YAAY;AAC/B,SAAqCC,aAAa,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAiB5E,OAAO,MAAMC,SAAS,GAAGA,CAA8B;EACrDC,WAAW;EACXC,OAAO;EACPC,IAAI;EACJC,OAAO;EACPC,QAAQ;EACRC,IAAI;EACJC,IAAI;EACJC,IAAI;EACJC,OAAO,GAAG,WAAW;EAAE;EACvBC,MAAM;EACNC,aAAa;EACb,GAAGC;AACsB,CAAC,KAAK;EAAAC,EAAA;EAC/B,MAAM;IACJC,KAAK,EAAE;MAAEC,QAAQ;MAAEC,MAAM;MAAEC,KAAK;MAAEC;IAAI,CAAC;IACvCC,UAAU,EAAE;MAAEC,OAAO;MAAEC,SAAS;MAAEC,OAAO;MAAEC;IAAM;EACnD,CAAC,GAAG1B,aAAa,CAAC;IAChBM,IAAI;IACJC,OAAO;IACPoB,KAAK,EAAE;MAAEC,QAAQ,EAAE;IAAK,CAAC;IACzBC,YAAY,EAAE;EAChB,CAAC,CAAC;EAEF,MAAMC,cAAc,GAAGtB,QAAQ,GAAG,UAAU,GAAG,OAAO;EAEtD,oBACEN,OAAA,CAACH,CAAC,CAACgC,kBAAkB;IAAAC,QAAA,gBACnB9B,OAAA,CAACH,CAAC,CAACkC,IAAI;MAAEvB,IAAI,EAAEA,IAAK;MAACwB,KAAK,EAAC,4BAA4B;MAACtB,OAAO,EAAC,WAAW;MAACD,IAAI,EAAC,MAAM;MAACE,MAAM,EAAEA,MAAO;MAACC,aAAa,EAAEA;IAAc;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eACzIpC,OAAA,CAACH,CAAC,CAACI,SAAS;MAAA,GACRY,KAAK;MACDwB,EAAE,EAAET,cAAe;MACnBzB,OAAO,EAAC,OAAO;MACfD,WAAW,EAAEA,WAAY;MACzBc,QAAQ,EAAEA,QAAS;MACnBC,MAAM,EAAEA,MAAO;MACfC,KAAK,EAAEA,KAAM;MACbC,GAAG,EAAEA,GAAI;MACTZ,IAAI,EAAED,QAAQ,GAAGC,IAAI,GAAG+B;IAAU;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEkB,CAAC;EAEzB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF,CAAC;AAACtB,EAAA,CA1EWb,SAAS;EAAA,QAiBhBH,aAAa;AAAA;AAAAyC,EAAA,GAjBNtC,SAAS;AAAA,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}