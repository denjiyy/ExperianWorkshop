{"ast":null,"code":"import { z } from \"zod\";\nexport const registerFormSchema = z.object({\n  fullName: z.string({\n    required_error: \"Field is required\"\n  }).min(5),\n  username: z.string({\n    invalid_type_error: \"\",\n    required_error: \"Field is required\"\n  }).min(5),\n  email: z.string({\n    invalid_type_error: \"\",\n    required_error: \"Field is required\"\n  }).email(),\n  password: z.string({\n    required_error: \"Field is required\"\n  }).regex(/^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*\\W)(?!.* ).{8,16}$/, {\n    message: \"Password does not meet the requirements\"\n  }).max(30),\n  confirmPassword: z.string({\n    required_error: \"Field is required\"\n  }),\n  phoneNumber: z.string().regex(/^\\+359\\d{9}$/, {\n    message: \"Invalid phone number\"\n  }),\n  address: z.string({\n    required_error: \"Field is required\"\n  }).min(5),\n  dateOfBirth: z.string({\n    required_error: \"Field is required\",\n    invalid_type_error: \"Invalid date\"\n  }).date()\n}).refine(data => data.password === data.confirmPassword, {\n  message: \"Passwords do not match\",\n  path: [\"confirmPassword\"]\n});","map":{"version":3,"names":["z","registerFormSchema","object","fullName","string","required_error","min","username","invalid_type_error","email","password","regex","message","max","confirmPassword","phoneNumber","address","dateOfBirth","date","refine","data","path"],"sources":["D:/experianProject/experian/ExperianWorkshop/src/schemas/registerFormSchema.ts"],"sourcesContent":["import { z } from \"zod\";\n\nexport const registerFormSchema = z\n  .object({\n    fullName:z.string({required_error:\"Field is required\"}).min(5),\n    username: z.string({ invalid_type_error: \"\" , required_error:\"Field is required\" }).min(5),\n    email: z.string({ invalid_type_error: \"\" , required_error:\"Field is required\" }).email(),\n    password: z.string({ required_error:\"Field is required\" }).regex(/^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*\\W)(?!.* ).{8,16}$/\n,{\n      message: \"Password does not meet the requirements\"\n    }).max(30),\n    confirmPassword: z.string({required_error:\"Field is required\" }),\n    phoneNumber :z.string().regex(/^\\+359\\d{9}$/,{\n      message : \"Invalid phone number\"\n    }),\n    address:z.string({required_error:\"Field is required\"}).min(5),\n    dateOfBirth : z.string({required_error:\"Field is required\", invalid_type_error:\"Invalid date\"}).date()\n  })\n  .refine((data) => data.password === data.confirmPassword, {\n    message: \"Passwords do not match\",\n    path: [\"confirmPassword\"],\n  });\n\nexport type RegisterFormValues = z.infer<typeof registerFormSchema>;\n"],"mappings":"AAAA,SAASA,CAAC,QAAQ,KAAK;AAEvB,OAAO,MAAMC,kBAAkB,GAAGD,CAAC,CAChCE,MAAM,CAAC;EACNC,QAAQ,EAACH,CAAC,CAACI,MAAM,CAAC;IAACC,cAAc,EAAC;EAAmB,CAAC,CAAC,CAACC,GAAG,CAAC,CAAC,CAAC;EAC9DC,QAAQ,EAAEP,CAAC,CAACI,MAAM,CAAC;IAAEI,kBAAkB,EAAE,EAAE;IAAGH,cAAc,EAAC;EAAoB,CAAC,CAAC,CAACC,GAAG,CAAC,CAAC,CAAC;EAC1FG,KAAK,EAAET,CAAC,CAACI,MAAM,CAAC;IAAEI,kBAAkB,EAAE,EAAE;IAAGH,cAAc,EAAC;EAAoB,CAAC,CAAC,CAACI,KAAK,CAAC,CAAC;EACxFC,QAAQ,EAAEV,CAAC,CAACI,MAAM,CAAC;IAAEC,cAAc,EAAC;EAAoB,CAAC,CAAC,CAACM,KAAK,CAAC,2DAA2D,EAC/H;IACKC,OAAO,EAAE;EACX,CAAC,CAAC,CAACC,GAAG,CAAC,EAAE,CAAC;EACVC,eAAe,EAAEd,CAAC,CAACI,MAAM,CAAC;IAACC,cAAc,EAAC;EAAoB,CAAC,CAAC;EAChEU,WAAW,EAAEf,CAAC,CAACI,MAAM,CAAC,CAAC,CAACO,KAAK,CAAC,cAAc,EAAC;IAC3CC,OAAO,EAAG;EACZ,CAAC,CAAC;EACFI,OAAO,EAAChB,CAAC,CAACI,MAAM,CAAC;IAACC,cAAc,EAAC;EAAmB,CAAC,CAAC,CAACC,GAAG,CAAC,CAAC,CAAC;EAC7DW,WAAW,EAAGjB,CAAC,CAACI,MAAM,CAAC;IAACC,cAAc,EAAC,mBAAmB;IAAEG,kBAAkB,EAAC;EAAc,CAAC,CAAC,CAACU,IAAI,CAAC;AACvG,CAAC,CAAC,CACDC,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACV,QAAQ,KAAKU,IAAI,CAACN,eAAe,EAAE;EACxDF,OAAO,EAAE,wBAAwB;EACjCS,IAAI,EAAE,CAAC,iBAAiB;AAC1B,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}